const l=JSON.parse(`{"key":"v-328c53a2","path":"/cpp/unit3.html","title":"C++ Primer Plus 第三章阅读笔记 - 简单变量","lang":"zh-CN","frontmatter":{"title":"C++ Primer Plus 第三章阅读笔记 - 简单变量","description":"面向对象编程（OOP）的本质是设计并拓展自己的数据类型。设计自己的数据类型就是让类型与数据匹配。 简单变量 为了把数据存储到计算机中，需要记录3个属性——在哪里？啥类型？是什么？ 变量名 变量名需遵循一定的规则，个人感觉下面这两条很新鲜： 以两个下划线开头或者一个下划线+一个大写字母开头的名称被保留给实现（编译器及其使用的资源）使用 以一个下划线开头的名称被保留给实现，用作全局标识符。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/cpp/unit3.html"}],["meta",{"property":"og:site_name","content":"Jielahou's Blog"}],["meta",{"property":"og:title","content":"C++ Primer Plus 第三章阅读笔记 - 简单变量"}],["meta",{"property":"og:description","content":"面向对象编程（OOP）的本质是设计并拓展自己的数据类型。设计自己的数据类型就是让类型与数据匹配。 简单变量 为了把数据存储到计算机中，需要记录3个属性——在哪里？啥类型？是什么？ 变量名 变量名需遵循一定的规则，个人感觉下面这两条很新鲜： 以两个下划线开头或者一个下划线+一个大写字母开头的名称被保留给实现（编译器及其使用的资源）使用 以一个下划线开头的名称被保留给实现，用作全局标识符。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-30T15:41:05.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-12-30T15:41:05.000Z"}]]},"headers":[{"level":2,"title":"变量名","slug":"变量名","link":"#变量名","children":[]},{"level":2,"title":"整型","slug":"整型","link":"#整型","children":[]},{"level":2,"title":"short、int、long和long long","slug":"short、int、long和long-long","link":"#short、int、long和long-long","children":[{"level":3,"title":"宽度","slug":"宽度","link":"#宽度","children":[]},{"level":3,"title":"sizeof和climits","slug":"sizeof和climits","link":"#sizeof和climits","children":[]},{"level":3,"title":"变量的初始化","slug":"变量的初始化","link":"#变量的初始化","children":[]}]},{"level":2,"title":"无符号类型","slug":"无符号类型","link":"#无符号类型","children":[]},{"level":2,"title":"选择整数类型","slug":"选择整数类型","link":"#选择整数类型","children":[]},{"level":2,"title":"整型字面值","slug":"整型字面值","link":"#整型字面值","children":[]},{"level":2,"title":"C++如何确定常量的类型","slug":"c-如何确定常量的类型","link":"#c-如何确定常量的类型","children":[{"level":3,"title":"特殊后缀","slug":"特殊后缀","link":"#特殊后缀","children":[]},{"level":3,"title":"范围限定","slug":"范围限定","link":"#范围限定","children":[]}]},{"level":2,"title":"char类型","slug":"char类型","link":"#char类型","children":[{"level":3,"title":"cout.put()","slug":"cout-put","link":"#cout-put","children":[]},{"level":3,"title":"转义序列","slug":"转义序列","link":"#转义序列","children":[]},{"level":3,"title":"通用字符名","slug":"通用字符名","link":"#通用字符名","children":[]},{"level":3,"title":"signed char和unsigned char","slug":"signed-char和unsigned-char","link":"#signed-char和unsigned-char","children":[]},{"level":3,"title":"wchar_t","slug":"wchar-t","link":"#wchar-t","children":[]},{"level":3,"title":"char16_t和char32_t","slug":"char16-t和char32-t","link":"#char16-t和char32-t","children":[]},{"level":3,"title":"bool类型","slug":"bool类型","link":"#bool类型","children":[]}]},{"level":2,"title":"const限定符","slug":"const限定符","link":"#const限定符","children":[]},{"level":2,"title":"书写浮点数","slug":"书写浮点数","link":"#书写浮点数","children":[]},{"level":2,"title":"浮点类型","slug":"浮点类型","link":"#浮点类型","children":[]},{"level":2,"title":"浮点常量","slug":"浮点常量","link":"#浮点常量","children":[]},{"level":2,"title":"浮点数的优缺点","slug":"浮点数的优缺点","link":"#浮点数的优缺点","children":[]},{"level":2,"title":"运算符优先级和结合性","slug":"运算符优先级和结合性","link":"#运算符优先级和结合性","children":[]},{"level":2,"title":"除法分支","slug":"除法分支","link":"#除法分支","children":[]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[{"level":3,"title":"初始化和赋值进行的转换","slug":"初始化和赋值进行的转换","link":"#初始化和赋值进行的转换","children":[]},{"level":3,"title":"表达式中的转换","slug":"表达式中的转换","link":"#表达式中的转换","children":[]},{"level":3,"title":"不同类型算术运算的转换","slug":"不同类型算术运算的转换","link":"#不同类型算术运算的转换","children":[]},{"level":3,"title":"传递参数时的转换","slug":"传递参数时的转换","link":"#传递参数时的转换","children":[]},{"level":3,"title":"强制类型转换","slug":"强制类型转换","link":"#强制类型转换","children":[]},{"level":3,"title":"auto声明","slug":"auto声明","link":"#auto声明","children":[]}]}],"git":{"createdTime":1672406510000,"updatedTime":1672414865000,"contributors":[{"name":"jielahou","email":"jielahou@gmail.com","commits":2}]},"readingTime":{"minutes":10.14,"words":3042},"filePathRelative":"cpp/unit3.md","localizedDate":"2022年12月30日","excerpt":"<blockquote>\\n<p>面向对象编程（OOP）的本质是<strong>设计并拓展自己的数据类型</strong>。设计自己的数据类型就是<strong>让类型与数据匹配</strong>。</p>\\n</blockquote>\\n<h1> 简单变量</h1>\\n<p>为了把数据存储到计算机中，需要记录3个属性——<strong>在哪里？啥类型？是什么？</strong></p>\\n<h2> 变量名</h2>\\n<p>变量名需遵循一定的规则，个人感觉下面这两条很新鲜：</p>\\n<ul>\\n<li>以<strong>两个下划线</strong>开头或者<strong>一个下划线+一个大写字母</strong>开头的名称被保留给实现（编译器及其使用的资源）使用</li>\\n<li>以<strong>一个下划线</strong>开头的名称被保留给实现，用作<strong>全局标识符</strong>。</li>\\n</ul>","autoDesc":true}`);export{l as data};
