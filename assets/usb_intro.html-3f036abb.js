import{_ as n,W as r,X as a,$ as o,Y as t,Z as s}from"./framework-216dd15f.js";const g="/assets/image-20230709194558228-3717ef04.png",e="/assets/screenshot_20230710103258-5aeaf11d.png",l="/assets/截图_20230710095321-1a7615a1.png",i="/assets/screenshot_20230710104320-6134c396.png",p="/assets/control_data_example-db67d8ed.png",c="/assets/screenshot_20230710115010-a588a5d3.png",d="/assets/image-20230710100821307-e434907a.png",h={},u=o('<blockquote><p>主要介绍几种数据包，本文大量参考了<code>hevry.jon at hotmail.com </code>的USB2.0资料、FengJungle的USB2.0协议中文版，在此作出感谢！若侵权，请联系我删除。</p></blockquote><h1 id="usb体系" tabindex="-1"><a class="header-anchor" href="#usb体系" aria-hidden="true">#</a> USB体系</h1><figure><img src="'+g+'" alt="arch" tabindex="0"><figcaption>arch</figcaption></figure><p>一个 USB 系统中仅有一个 USB 主机；</p><p>设备包括 USB 功能设备和USB HUB，最多支持 127 个设备；</p><h1 id="usb四种类型传输" tabindex="-1"><a class="header-anchor" href="#usb四种类型传输" aria-hidden="true">#</a> USB四种类型传输</h1><blockquote><p>此处参考了<code>hevry.jon at hotmail.com </code>的USB2.0资料，在此作出感谢！若侵权，请联系我删除。</p></blockquote><p><strong>控制传输</strong>：主要用于在设备连接时对设备进行<strong>枚举</strong>以及其他因设备而异的特定操作。</p><p><strong>中断传输</strong>：用于对<strong>延迟要求严格、小量数据</strong>的可靠传输，如键盘、游戏手柄等。</p><blockquote><p>注意：中断传输并不意味在传输过程中，设备会先中断 HOST，继而通知 HOST 启动传输。<strong>中断传输也是 HOST 发起的传输</strong>，采用<strong>轮询的方式询问设备是否有数据发送</strong>，若有则设备向主机传输数据，否则 NAK 主机</p></blockquote><p><strong>批量传输</strong>：用于对<strong>延迟要求宽松，大量数据</strong>的可靠传输，如 U 盘等。</p><p><strong>同步传输</strong>：用于对<strong>可靠性要求不高</strong>的<strong>实时</strong>数据传输，如摄像头、USB 音响等。</p><h2 id="控制传输" tabindex="-1"><a class="header-anchor" href="#控制传输" aria-hidden="true">#</a> 控制传输</h2><blockquote><p><strong>控制传输</strong>：主要用于在设备连接时对设备进行<strong>枚举</strong>以及其他因设备而异的特定操作。</p></blockquote><p>控制传输是一种可靠的<strong>双向</strong>传输，一次控制传输可分为三个阶段。</p><ul><li>第一阶段为<strong>建立阶段</strong>，从 HOST 到 Device 的 SETUP 事务传输，这个阶段指定了此次控制传输的请求类型；</li><li>第二阶段为<strong>数据阶段</strong>，也有些请求没有数据阶段；</li><li>第三阶段为<strong>状态阶段</strong>，通过一次IN/OUT 传输表明请求是否成功完成。</li></ul><blockquote><p>USB 采用**“令牌包” -“数据包” -“握手包”**的传输机制。控制传输的三个阶段，<strong>每一个阶段都包括令牌包、数据包、握手包三部分</strong>。</p></blockquote><p>控制传输通过<strong>控制管道</strong>在应用软件和 Device 的控制端点之间进行，<strong>控制传输过程中传输的数据是有格式定义的</strong>， USB 设备或主机可根据格式定义解析获得的数据含义。<strong>其他三种传输类型都没有格式定义</strong>。</p><p>控制传输对于<strong>最大包长度</strong>有固定的要求。对于高速设备该值为 64Byte；对于低速设备该值为 8；全速设备可以是 8 或 16 或 32 或 64。</p><blockquote><p><strong>最大包长度</strong>表征了一个端点单次接收/发送数据的能力，实际上反应的是<strong>该端点对应的Buffer的大小</strong>。</p><p>当通过一个端点进行数据传输时，若<strong>数据的大小超过该端点的最大包长度</strong>时，<strong>需要将数据拆分</strong>成若干个数据包传输，并且要求<strong>除最后一个包外</strong>，<strong>所有的包长度均等于该最大包长度</strong>。这也就是说<strong>如果一个端点收到/发送了一个长度小于最大包长度的包</strong>，即意味着数据传输<strong>结束</strong>。</p></blockquote><h2 id="中断传输" tabindex="-1"><a class="header-anchor" href="#中断传输" aria-hidden="true">#</a> 中断传输</h2><blockquote><p><strong>中断传输</strong>：用于对<strong>延迟要求严格、小量数据</strong>的可靠传输，如键盘、游戏手柄等。</p></blockquote><p>中断传输是一种<strong>轮询</strong>的传输方式，是一种<strong>单向</strong>的传输，HOST 通过固定的间隔对中断端点进行查询，若有数据传输或可以接收数据则返回数据或发送数据，否则返回 NAK，表示尚未准备好。</p><blockquote><p>所谓单向传输，并不是说该传输只支持一个方向的传输，而是指在<strong>某个端点上的传输仅支持一个方向</strong>，或输出，或输入。如果<strong>需要在两个方向上进行某种单向传输</strong>，<strong>需要占用两个端点</strong>，分别配置成不同的方向，可以拥有相同的端点编号。</p></blockquote>',24),m=t("p",null,[s("中断端点的"),t("strong",null,"轮询间隔由在端点描述符中定义"),s("，全速端点的轮询间隔可以是 1~255mS，低速端点为 10~255mS，高速端点为"),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mo",{stretchy:"false"},"("),t("msup",null,[t("mn",null,"2"),t("mrow",null,[t("mi",null,"i"),t("mi",null,"n"),t("mi",null,"t"),t("mi",null,"e"),t("mi",null,"r"),t("mi",null,"v"),t("mi",null,"a"),t("mi",null,"l"),t("mo",null,"−"),t("mn",null,"1")])]),t("mo",{stretchy:"false"},")"),t("mo",null,"×"),t("mn",null,"125"),t("mi",null,"u"),t("mi",null,"S")]),t("annotation",{encoding:"application/x-tex"},"(2^{interval-1})\\times 125uS")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"1.0991em","vertical-align":"-0.25em"}}),t("span",{class:"mopen"},"("),t("span",{class:"mord"},[t("span",{class:"mord"},"2"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.8491em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mtight"},[t("span",{class:"mord mathnormal mtight"},"in"),t("span",{class:"mord mathnormal mtight"},"t"),t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"er"),t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"v"),t("span",{class:"mord mathnormal mtight"},"a"),t("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),t("span",{class:"mbin mtight"},"−"),t("span",{class:"mord mtight"},"1")])])])])])])])]),t("span",{class:"mclose"},")"),t("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),t("span",{class:"mbin"},"×"),t("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6833em"}}),t("span",{class:"mord"},"125"),t("span",{class:"mord mathnormal"},"u"),t("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S")])])]),s("，其中 interval 取 1 到 16 之间的值。")],-1),b=o('<h2 id="批量传输" tabindex="-1"><a class="header-anchor" href="#批量传输" aria-hidden="true">#</a> 批量传输</h2><blockquote><p><strong>批量传输</strong>：用于对<strong>延迟要求宽松，大量数据</strong>的可靠传输，如 U 盘等。</p></blockquote><p>批量传输是一种<strong>可靠的单向传输</strong>，但<strong>延迟没有保证</strong>，它尽量利用可以利用的带宽来完成传输，适合数据量比较大的传输。</p><p>低速 USB 设备不支持批量传输，高速批量端点的最大包长度为 512，全速批量端点的最大包长度可以为 8、16、32、64。 批量传输在访问 USB 总线时，相对其他传输类型<strong>具有最低的优先级</strong>，USB HOST 总是优先安排其他类型的传输，<strong>当总线带宽有富余时才安排批量传输</strong>。</p><p>高速的批量端点必须支持 PING 操作，向主机报告端点的状态，NYET 表示否定应答，没有准备好接收下一个数据包，ACK 表示肯定应答，已经准备好接收下一个数据包。</p><h2 id="同步传输" tabindex="-1"><a class="header-anchor" href="#同步传输" aria-hidden="true">#</a> 同步传输</h2><blockquote><p><strong>同步传输</strong>：用于对<strong>可靠性要求不高</strong>的<strong>实时</strong>数据传输，如摄像头、USB 音响等。</p></blockquote><p>同步传输是一种<strong>实时的、不可靠</strong>的传输，<strong>不支持错误重发机制</strong>。</p><h1 id="usb数据包" tabindex="-1"><a class="header-anchor" href="#usb数据包" aria-hidden="true">#</a> USB数据包</h1><blockquote><p>此处参考了<code>hevry.jon at hotmail.com </code>的USB2.0资料，在此作出感谢！若侵权，请联系我删除。</p></blockquote><p>USB 采用<strong>轮询的广播机制</strong>传输数据，<strong>所有的传输都由主机发起</strong>，任何时刻整个 USB 体系内<strong>仅允许一个数据包的传输</strong>，即不同物理传输线上看到的数据包都是同一被广播的数据包。</p><p>USB 采用**“令牌包” -“数据包” -“握手包”**的传输机制。</p><ul><li><p><strong>令牌包</strong>：指定数据包去向或者来源的设备地址和端点（Endpoint），从而保证了只有一个设备对被广播的数据包/令牌包作出响应。</p></li><li><p><strong>数据包</strong>：USB 总线上数据传输的最小单位，包括 <strong>SYNC、数据及 EOP</strong> 三个部分。其中数据的格式针对不同的包有不同的格式。但<strong>都以 8 位的 PID 开始</strong>。PID 指定了数据包的类型（共 16 种）。</p><blockquote><p>令牌包即指 PID 为 IN/OUT/SETUP 的包。</p></blockquote></li><li><p><strong>握手包</strong>：表示了传输的成功与否</p></li></ul><h2 id="usb数据包格式" tabindex="-1"><a class="header-anchor" href="#usb数据包格式" aria-hidden="true">#</a> USB数据包格式</h2><blockquote><p>这里的数据包包括上面的三种包：令牌包、数据包、握手包</p></blockquote><p>USB 采用<strong>小端法</strong>字节序，在总线上先传输一个字节的最低有效位，最后传输最高有效位，采用 NRZI 编码，若遇到<strong>连续的 6 个 1 要求进行为填充</strong>，即<strong>插入一个 0</strong>。</p><p>所有的 USB 包<strong>都由 SYNC 开始</strong>，高速包的 SYNC 宽度为 32bit，全速/低速包的 SYNC 段度为 8bit。实际接收到的 SYNC 长度由于 USB HUB 的关系，可能会小于该值。</p><table style="text-align:center;"><tr><td rowspan="2">字段名</td><td rowspan="2">PID</td><td>ADDR</td><td>ENDP</td><td rowspan="2">DATA<br>(数据包特有，令牌包、握手包没有)</td><td rowspan="2">CRC</td></tr><tr><td colspan="2">FrameNumber(令牌包特有，数据包、握手包没有)</td></tr><tr><td rowspan="2">位数</td><td rowspan="2">4+4D</td><td>7</td><td>4</td><td rowspan="2">N*8(N=0,1,...,1024)</td><td rowspan="2">5或16</td></tr><tr><td colspan="2">11</td></tr></table><blockquote><ul><li>令牌包有PID、ADDR、ENDP、CRC，没有DATA；</li><li>数据包有PID、DATA、CRC，没有ADDR和ENDP；</li><li>握手包只有PID。</li></ul></blockquote><ul><li><p><strong>PID</strong>：由4位二进制（低4位）+4位校验码（高4位，对低4位的取反）表征了<strong>数据包的类型</strong>，分为令牌（Token）、数据（Data）、握手（Handshacke）以 及特殊包 4 大类，共 16 种类型的 PID。具体定义见英文协议第 196 页（见下图）。</p><blockquote><p>握手包包括 ACK，NAK，STALL 以及 NYET 四种，其中 ACK 表示肯定的应答，成功 的数据传输；NAK 表示否定的应答，失败的数据传输，要求重新传输；STALL 表示功能错 误或端点被设置了 STALL 属性；NYET 表示尚未准备好，要求等待。</p></blockquote><figure><img src="'+e+'" alt="PID格式" tabindex="0"><figcaption>PID格式</figcaption></figure><figure><img src="'+l+'" alt="PID Types" tabindex="0"><figcaption>PID Types</figcaption></figure></li></ul><p>数据在 USB 总线上的传输以<strong>包</strong>为单位，<strong>包只能在帧内传输</strong>。高速 USB 总线的帧周期为 125uS，全速以及低速 USB 总线的帧周期为 1mS。<strong>帧的起始由一个特定的包（SOF 包）表示</strong>，<strong>帧尾为 EOF</strong>。<strong>EOF 不是一个包</strong>，而是一种电平状态，EOF 期间不允许有数据传输。</p><h2 id="控制传输-1" tabindex="-1"><a class="header-anchor" href="#控制传输-1" aria-hidden="true">#</a> 控制传输</h2><blockquote><p>回忆：控制传输是<strong>双向</strong>的传输，必须有 IN 和 OUT 两个方向上的特定端点号的控制端点来完成两 个方向上的控制传输。</p></blockquote><blockquote><p>回忆：<strong>每个阶段都有3个包</strong>：令牌包、数据包、握手包</p></blockquote><h3 id="建立阶段" tabindex="-1"><a class="header-anchor" href="#建立阶段" aria-hidden="true">#</a> 建立阶段</h3><p><strong><u>主机从 USB 设备</u>获取配置信息</strong>，并设置设备的配置值。</p><p>建立阶段的数据交换<strong>包含了 SETUP 令牌包、紧随其后的 DATA0 数据包以及 ACK 握手包</strong>（SETUP 只能使用 DATA0 包， 8 字节）。它的作用是执行一个设置（概念含糊）的数据交换，并定义此控制传输的内容(即： 在 Data Stage 中 IN 或 OUT 的 data 包个数，及发送方向，在 Setup Stage 已经被设定)。</p><p>建立阶段<strong>USB设备只能返回 ACK 包</strong>，或者<strong>不返回任何包</strong>。</p><blockquote><ul><li>建立阶段令牌包：主机--&gt;USB设备</li><li>建立阶段数据包：主机--&gt;USB设备</li><li>建立阶段握手包：USB设备--&gt;主机</li></ul></blockquote><p>示例：</p><blockquote><p>从上表中可以看到，ACK的PID是0010B，取反后为1101B。但文档中有这么一句话，“When sent on the USB, the rightmost bit (bit 0) will be sent first.”，再对应PID格式图，实际发出去的数据应该是 (这一位0先发--&gt;)01001011，也就是0x4B啦！所以第三行握手包的ACK的PID写的是0x4B。</p></blockquote><figure><img src="'+i+'" alt="控制传输-建立阶段示意" tabindex="0"><figcaption>控制传输-建立阶段示意</figcaption></figure><h3 id="传输阶段" tabindex="-1"><a class="header-anchor" href="#传输阶段" aria-hidden="true">#</a> 传输阶段</h3><p>数据过程是可选的。一个数据过程包含一笔或者多笔数据事务。数据过程的<strong>第一个数据包必须是 DATA1 包</strong>，<strong>然后</strong>每次正确传输一个数据包就<strong>在 DATA0 和 DATA1 之间交替</strong>。</p><p>根据数据阶段的数据传输的方向，控制传输又可分为 3 种类型：<strong>控制写入、控制读取、无数据控制</strong>。</p><figure><img src="'+p+'" alt="control_data_example" tabindex="0"><figcaption>control_data_example</figcaption></figure><ul><li><p><strong>控制写入</strong>（配置 USB 设备）： 是<strong>将数据从主机传到设备上</strong>，所传的数据即为对 USB 设备的<strong>配置信息</strong>。</p><p>流程：①主机<strong>先送出一个OUT令牌信息包</strong>，<strong>表示数据要送出去</strong>；②紧接着，<strong>主机将数据通过 DATA1/DATA0 数据信息包传递至设备</strong>。③最后，<strong>设备</strong>将以下列方式加以<strong>响应</strong>：当数据已经<strong>正确接收</strong>时， 设备<strong>送出 ACK 令牌信息包</strong>；当设备<strong>正在忙碌</strong>时，设备<strong>发出 NAK 握手信息包</strong>；当发生了<strong>错误</strong>时，设备发出 <strong>STALL 握手信息包</strong>。</p><blockquote><p>令牌包：主机--&gt;设备；数据包：主机--&gt;设备；握手包：设备--&gt;主机</p></blockquote></li><li><p><strong>控制读取</strong>（读取 USB 描述符）： 是<strong>将数据从设备读到主机上</strong>，读取的数据是 USB 设备描述符。</p><p>流程：①主机<strong>先发送一个 IN 令牌信息包</strong>，<strong>表示要读数据进来</strong>。②然后，<strong>设备</strong>将数据通过 DATA1/DATA0 数据信息包<strong>回传给主机</strong>。③最后，<strong>主机</strong>将以下列的方式加以<strong>响应</strong>：当数据已经正确接收时， 主机送出 ACK 令牌包；当主机正在忙碌时，发出 NAK 握手包；当发生了错误时，主 机发出 STALL 握手包。</p><blockquote><p>令牌包：主机--&gt;设备；数据包：设备--&gt;主机；握手包：主机--&gt;设备</p></blockquote></li><li><p><strong>无数据控制</strong>：略</p></li></ul><p>示例：</p><figure><img src="'+c+'" alt="传输阶段示例" tabindex="0"><figcaption>传输阶段示例</figcaption></figure><h3 id="状态阶段" tabindex="-1"><a class="header-anchor" href="#状态阶段" aria-hidden="true">#</a> 状态阶段</h3><p>用来表示整个传输的过程已完全结束。<strong>通过一次 IN/OUT 传输表明请求是否成功完成</strong>。 状态阶段传输的方向必须<strong>与数据阶段的方向相反</strong>，即原来是 IN 令牌包，这个阶段应为 OUT 令牌包；反之，原来是 OUT 令牌包，这个阶段应为 IN 令牌包。</p><p>在状态阶段，对于控制读取（此前主机送出IN令牌包）而言，这时主机会送出 OUT 令牌包，其后，<strong>主机</strong>再发 0 长度的 DATA1 包，<strong>设备</strong>也会做出相对应的动作，送 ACK 握手包、NAK 握手包或 STALL 握手包。</p><p>在状态阶段，对于控制写入（此前主机送出OUT令牌包）而言，这时主机会送出 IN 令牌包，其后，<strong>设备</strong>再发 0 长度的 DATA1 包，<strong>主机</strong>也会做出相对应的动作，送 ACK 握手包、NAK 握手包或 STALL 握手包。</p><figure><img src="'+d+'" alt="控制传输整个例子" tabindex="0"><figcaption>控制传输整个例子</figcaption></figure>',44),S=[u,m,b];function A(U,f){return r(),a("div",null,S)}const k=n(h,[["render",A],["__file","usb_intro.html.vue"]]);export{k as default};
