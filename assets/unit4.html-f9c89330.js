import{_ as e,W as s,X as d,$ as n}from"./framework-11db905c.js";const a={},i=n(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h1><p>数组是一种数据格式，能够存储多个<strong>同类型</strong>的数值。</p><p>声明数组的通用格式：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>typeName arrayName[arraySize];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="初始化数组元素" tabindex="-1"><a class="header-anchor" href="#初始化数组元素" aria-hidden="true">#</a> 初始化数组元素</h2><p>我们可以使用大括号初始化方法<strong>在声明时</strong>（且<strong>仅</strong>在声明时）将数组初始化。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int scores[5] = {1, 2, 3, 4, 5};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不能将一个数组直接赋值给另一个数组。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int scores[5] = {1, 2, 3, 4, 5};
int ranks[5] = scores;//not allowed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化时提供的<strong>元素值的个数</strong>可以<strong>少于</strong>数组的<strong>元素数目</strong>，此时其他元素会被设置为<code>0</code>。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int scores[5] = {0, 1};
cout &lt;&lt; scores[2];//0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>于是如果想把数组全部初始化为0，可以这么做：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int scores[5] = {0};
int scores[5] = {};//c++11，略掉了0
int scores[5]{};//c++11，略掉了等号和0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>初始化时不提供<code>[]</code>内的值，那么C++编译器将自动计算元素个数。</p><p>值得一提的是，使用列表初始化时，不允许<strong>缩窄转换</strong>（备忘：硬赋“吃不下”的值）。</p><h2 id="针对数组的sizeof" tabindex="-1"><a class="header-anchor" href="#针对数组的sizeof" aria-hidden="true">#</a> 针对数组的<code>sizeof</code></h2><p><code>sizeof</code>作用于<strong>数组名</strong>，得到的是整个数组的字节数；作用于数组中的某个元素，则是单个该元素占用的字节数。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>int scores[5] = {1, 2, 3, 4, 5};
cout &lt;&lt; sizeof scores &lt;&lt; endl;//20 p.s. 4 * 5 = 20
cout &lt;&lt; sizeof scores[2] &lt;&lt; endl;//4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h1><blockquote><p>此处先介绍C风格字符串（char数组），下一小节介绍<code>string</code>类</p></blockquote><p><code>char</code>数组不一定是字符串，因为字符串要求以<code>\\0</code>结尾。如果一个<code>char</code>数组并未以<code>\\0</code>结尾，那么不应视为字符串处理，更不应使用相关函数对其进行处理，否则这些函数会一直顺着内存读下去，直至遇到<code>\\0</code>。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>char c1[] = {&#39;h&#39;, &#39;i&#39;};//Not a string
char c2[] = {&#39;h&#39;, &#39;i&#39;, &#39;\\0&#39;};//Right
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化字符串" tabindex="-1"><a class="header-anchor" href="#初始化字符串" aria-hidden="true">#</a> 初始化字符串</h2><p>我们可以使用<strong>字符串常量</strong>对<code>char</code>数组进行初始化</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>char c1[] = &quot;Aoligei!&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用<strong>双引号</strong>扩起的字符串<strong>隐式地包括结尾的空字符</strong>，譬如：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>char c1[8] = &quot;Bozo&quot;;
// B o z o \\0(这个是自动加到字符串末尾的，后续其他的也会设置为\\0) \\0 \\0 \\0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">区分字符常量和字符串常量</p><p>字符常量用<strong>单引号</strong>包裹，<strong>本质是</strong>字符串<strong>编码</strong>的简略表示。在ASCII系统中，<code>&#39;s&#39; == 83</code>，<code>&#39;s&#39;</code>只是<code>83</code>的另外一个写法罢了。</p><p>字符串常量用<strong>双引号</strong>包裹，如<code>&quot;s&quot;</code>，其代表由<code>&#39;s&#39;</code>、<code>&#39;\\0&#39;</code>组成的字符串。C++中视为字符串<strong>所在的内存地址</strong>。</p></div><h2 id="字符串常量拼接" tabindex="-1"><a class="header-anchor" href="#字符串常量拼接" aria-hidden="true">#</a> 字符串常量拼接</h2><p>任何两个被空白（空格、制表符、换行符）分割开来的字符串会被自动拼接成一个。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>char c1[] = &quot;Aoligei!&quot;
            &quot;Split!&quot;;
cout &lt;&lt; c1;//Aoligei!Split!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),c=[i];function r(o,l){return s(),d("div",null,c)}const u=e(a,[["render",r],["__file","unit4.html.vue"]]);export{u as default};
