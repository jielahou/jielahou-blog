import{_ as s,F as r,W as d,X as c,Y as e,Z as t,a0 as i,$ as o}from"./framework-9e409b07.js";const p="/assets/image-20230517153252505-736c1114.png",g="/assets/image-20230517153315076-e046871b.png",l="/assets/image-20230517153330420-e66dd4bd.png",m="/assets/image-20230517153354163-7e76ad81.png",u="/assets/image-20230517153407204-6b61ff59.png",h="/assets/image-20230517153545883-232487da.png",f="/assets/image-20230517153930444-ae26cab6.png",_="/assets/image-20230517154434682-e142b30d.png",b="/assets/image-20230517154616774-185b2d22.png",x="/assets/image-20230517154559140-03e9906d.png",I="/assets/image-20230517154945847-993fb0a5.png",k="/assets/image-20230517160219315-66ecb2eb.png",v="/assets/image-20230517160237540-e904fbb3.png",A="/assets/image-20230517160341464-8f7b77d9.png",P="/assets/image-20230517160545616-5fc9bdf7.png",C="/assets/image-20230517162422759-13c99151.png",M="/assets/image-20230517162214206-a5a020e8.png",R="/assets/image-20230517162244462-8bf75632.png",y="/assets/image-20230517162319293-2044d4e2.png",D="/assets/image-20230517162339499-20357531.png",q="/assets/image-20230517162444861-99dfc8ab.png",S="/assets/image-20230517165608231-68d886b3.png",B="/assets/image-20230517165641231-a6bbab2a.png",X="/assets/image-20230517165726129-e008976b.png",O="/assets/image-20230517170102743-7d56f313.png",G="/assets/image-20230517170120519-aecbcace.png",F="/assets/image-20230517170539345-f6b65370.png",T="/assets/image-20230517170801140-358e839f.png",U="/assets/image-20230517170754704-2bdae5ea.png",z="/assets/image-20230517171123338-7e8403af.png",N="/assets/image-20230518110557494-e483869e.png",H="/assets/image-20230517173931244-d5c86e5a.png",L="/assets/image-20230517174411243-8fab4866.png",E="/assets/image-20230517203346985-56d54e47.png",w="/assets/image-20230517203506422-3189ed4b.png",V="/assets/截图_20230517203638-f46486ce.gif",W="/assets/image-20230517203855942-3e5f281f.png",Y="/assets/image-20230517204642037-4280f5b0.png",j="/assets/image-20230517204711873-d25a8d9e.png",K="/assets/Processor_System_Resetv5.0-12-0554f415.png",Q="/assets/image-20230517213056389-2a919ace.png",J="/assets/image-20230517213415846-4c2165c7.png",Z="/assets/截图_20230517213510-392ab36c.gif",$="/assets/image-20230517213659905-929ac1aa.png",ee="/assets/image-20230517221751372-2ff20356.png",te="/assets/image-20230517214600301-fa6fefdf.png",ie="/assets/image-20230517222126124-86a66381.png",ae="/assets/image-20230517222308383-39475290.png",oe="/assets/image-20230517222434755-9c6d4c91.png",re="/assets/image-20230517224910313-0312cc64.png",ne="/assets/image-20230518193320762-a8222670.png",se="/assets/image-20230518224712837-7dc47e83.png",de="/assets/image-20230518224753414-460c7644.png",ce="/assets/mig_7series_0-e805161a.png",pe="/assets/mig_memory_selection-83e26e85.png",ge="/assets/截图_20230615171642-7f757624.png",le="/assets/截图_20230615171425-bb217082.png",me="/assets/截图_20230615171331-19fff3cc.png",ue="/assets/v2-8dc4866712a0f80a4b7852afd872ccc3_720w-043a875c.webp",he="/assets/截图_20230615172441-654e13cd.png",fe="/assets/截图_20230615172921-d6df303d.png",_e="/assets/截图_20230615181133-bcd4dc05.png",be="/assets/截图_20230615181435-0da8728e.png",xe="/assets/截图_20230615214158-0277432e.png",Ie="/assets/截图_20230624203545-55ea7bed.png",ke="/assets/截图_20230622215831-57e22388.png",ve="/assets/截图_20230622221354-a2ca5293.png",Ae="/assets/截图_20230624153129-b66f1f96.png",Pe="/assets/截图_20230624160909-8ba296fa.png",Ce={},Me=o('<blockquote><p>本文待完善！！仅供参考！！</p><p>本文大量引用了网络上的文章，在具体引用处的附近均标注了来源，感谢原作者们的分享！！</p><p>有的坑，一个人踩过，就行了，别让后来人再踩了...</p></blockquote><h1 id="封装处理器" tabindex="-1"><a class="header-anchor" href="#封装处理器" aria-hidden="true">#</a> 封装处理器</h1><p>将处理器封装成为带有AXI4接口形式的IP核以便调用。下面以gs232为例演示整个过程。</p><blockquote><p>gs232外部中断默认低电平有效！！！</p></blockquote><h2 id="第1步-创建工程" tabindex="-1"><a class="header-anchor" href="#第1步-创建工程" aria-hidden="true">#</a> 第1步：创建工程</h2><blockquote><p>根据使用的 FPGA 开发平台，选择对应的 FPGA 目标器件。根据实验平台搭载的 FPGA，在筛选器的“Family” 选择“Artix 7”，“Package”选择“fbg676”，在筛选得到的型号里面选择“xc7a200tfbg676-2”。</p></blockquote><h2 id="第2步-向新创建的工程中加入设计文件" tabindex="-1"><a class="header-anchor" href="#第2步-向新创建的工程中加入设计文件" aria-hidden="true">#</a> 第2步：向新创建的工程中加入设计文件</h2><blockquote><p>如果CPU中有用到Xilinx的IP，则记得在新工程中要实例化一份。</p><p>针对<code>gs232</code>，需要实例化如下BRAM：<code>sram_128x64</code>、<code>sram_128x32</code>、<code>sram_128x22</code>、<code>sram_32x52bit</code>。</p><p>提示：可以通过<strong>复制xci文件</strong>来复用龙芯官方实例化好的IP核。</p></blockquote><h2 id="第3步-创建并封装ip核" tabindex="-1"><a class="header-anchor" href="#第3步-创建并封装ip核" aria-hidden="true">#</a> 第3步：创建并封装IP核</h2><p>Tools-&gt;Create and Package New IP</p><figure><img src="'+p+'" alt="image-20230517153252505" tabindex="0"><figcaption>image-20230517153252505</figcaption></figure><figure><img src="'+g+'" alt="image-20230517153315076" tabindex="0"><figcaption>image-20230517153315076</figcaption></figure><figure><img src="'+l+'" alt="image-20230517153330420" tabindex="0"><figcaption>image-20230517153330420</figcaption></figure><p>注意，下方路径选择一个独立于源项目的文件夹。</p><figure><img src="'+m+'" alt="image-20230517153354163" tabindex="0"><figcaption>image-20230517153354163</figcaption></figure><figure><img src="'+u+'" alt="image-20230517153407204" tabindex="0"><figcaption>image-20230517153407204</figcaption></figure><p>点击Finish，进入下一步。</p><h2 id="第4步-编辑ip核" tabindex="-1"><a class="header-anchor" href="#第4步-编辑ip核" aria-hidden="true">#</a> 第4步：编辑IP核</h2><p>在上一步点击完Finish后，会自动打开一个新的临时工程，如下图所示。接下来主要通过右半部分来编辑IP核。</p><figure><img src="'+h+'" alt="image-20230517153545883" tabindex="0"><figcaption>image-20230517153545883</figcaption></figure><p>Identification选项用于编辑IP核的基本信息，包括名称、版本号、（调用IP核时）显示的名字等。看着设置就行。</p><figure><img src="'+f+'" alt="image-20230517153930444" tabindex="0"><figcaption>image-20230517153930444</figcaption></figure><p>接下来的Ports and Interfaces是重点（就它前面是个黄色感叹号！）。</p><figure><img src="'+_+'" alt="image-20230517154434682" tabindex="0"><figcaption>image-20230517154434682</figcaption></figure><p>可以看到，在General选项卡中，识别出该AXI接口为Master模式，符合设计。</p><figure><img src="'+b+'" alt="image-20230517154616774" tabindex="0"><figcaption>image-20230517154616774</figcaption></figure><p>在Port Mapping选项卡中，我们发现Vivado已经自动将我们的端口和AXI接口完成了映射（下方红色框）。此时应进行检查，查验自动生成的映射关系对不对。如果不对，首先将其从Mapped Ports Summary中删除错误映射，再在上半部分选择合适的映射，点击“Map Ports”按钮将正确映射关系添加进来。</p><figure><img src="'+x+'" alt="image-20230517154559140" tabindex="0"><figcaption>image-20230517154559140</figcaption></figure><p>在Parameters选项卡中为总线添加两个参数，<code>FREQ_HZ</code>和<code>ID_WIDTH</code>。其中，<code>FREQ_HZ</code>为总线工作频率，这里设置<code>FREQ_HZ</code>的默认值为<code>33000000</code>，即33MHz；<code>ID_WIDTH</code>设置为0。</p><blockquote><p>如果不设置，后续综合、生成比特流会报错。</p></blockquote><figure><img src="'+I+'" alt="image-20230517154945847" tabindex="0"><figcaption>image-20230517154945847</figcaption></figure><figure><img src="'+k+'" alt="image-20230517160219315" tabindex="0"><figcaption>image-20230517160219315</figcaption></figure><figure><img src="'+v+'" alt="image-20230517160237540" tabindex="0"><figcaption>image-20230517160237540</figcaption></figure><figure><img src="'+A+'" alt="image-20230517160341464" tabindex="0"><figcaption>image-20230517160341464</figcaption></figure><p>同理设置<code>ID_WIDTH</code>，略。</p><p>最后点击OK，完成接口编辑工作。</p><p>最后，点击“Review and Package”选项，点击“Package IP”完成最终封装。</p><figure><img src="'+P+'" alt="image-20230517160545616" tabindex="0"><figcaption>image-20230517160545616</figcaption></figure><p>在你设置的 导出IP文件夹 中，应该可以看到如下文件：</p><figure><img src="'+C+'" alt="image-20230517162422759" tabindex="0"><figcaption>image-20230517162422759</figcaption></figure><h1 id="block-design初入门" tabindex="-1"><a class="header-anchor" href="#block-design初入门" aria-hidden="true">#</a> Block Design初入门</h1><h2 id="新建工程" tabindex="-1"><a class="header-anchor" href="#新建工程" aria-hidden="true">#</a> 新建工程</h2><p>略</p><h2 id="导入处理器ip核" tabindex="-1"><a class="header-anchor" href="#导入处理器ip核" aria-hidden="true">#</a> 导入处理器IP核</h2><blockquote><p>我们上面对处理器IP核进行封装，目的就在于能够方便的导入<code>(*^_^*)</code></p></blockquote><figure><img src="'+M+'" alt="image-20230517162214206" tabindex="0"><figcaption>image-20230517162214206</figcaption></figure><figure><img src="'+R+'" alt="image-20230517162244462" tabindex="0"><figcaption>image-20230517162244462</figcaption></figure><figure><img src="'+y+'" alt="image-20230517162319293" tabindex="0"><figcaption>image-20230517162319293</figcaption></figure><figure><img src="'+D+'" alt="image-20230517162339499" tabindex="0"><figcaption>image-20230517162339499</figcaption></figure><p>添加成功，则提示：</p><figure><img src="'+q+'" alt="image-20230517162444861" tabindex="0"><figcaption>image-20230517162444861</figcaption></figure><h2 id="创建block-design" tabindex="-1"><a class="header-anchor" href="#创建block-design" aria-hidden="true">#</a> 创建Block Design</h2><figure><img src="'+S+'" alt="image-20230517165608231" tabindex="0"><figcaption>image-20230517165608231</figcaption></figure><p>点击方框可以让这块区域显示的更大：</p><figure><img src="'+B+'" alt="image-20230517165641231" tabindex="0"><figcaption>image-20230517165641231</figcaption></figure><p>将我们的CPU IP添加进来</p><figure><img src="'+X+'" alt="image-20230517165726129" tabindex="0"><figcaption>image-20230517165726129</figcaption></figure><p>添加进来啦</p><figure><img src="'+O+'" alt="image-20230517170102743" tabindex="0"><figcaption>image-20230517170102743</figcaption></figure><h2 id="添加一些基本ip核" tabindex="-1"><a class="header-anchor" href="#添加一些基本ip核" aria-hidden="true">#</a> 添加一些基本IP核</h2><h3 id="添加时钟管理单元" tabindex="-1"><a class="header-anchor" href="#添加时钟管理单元" aria-hidden="true">#</a> 添加时钟管理单元</h3><blockquote><p><em>Clocking Wrzard</em>属于非常常用的IP核，可用于时钟的<strong>分频、倍频</strong>，在工程中需要多个时钟时，通常选用该IP核产生其他时钟。</p></blockquote><figure><img src="'+G+'" alt="image-20230517170120519" tabindex="0"><figcaption>image-20230517170120519</figcaption></figure><p>双击建好的IP核，进入到配置页面：</p><figure><img src="'+F+'" alt="image-20230517170539345" tabindex="0"><figcaption>image-20230517170539345</figcaption></figure><p>在Outputs Clocks，设置需要的时钟信号及其频率，并设置<code>reset</code>信号为低电平有效。</p><blockquote><p>根据<code>soc_up介绍_v0.01.pdf</code>可知，开发板上时钟晶振为 100MHz。</p></blockquote><figure><img src="'+T+'" alt="image-20230517170801140" tabindex="0"><figcaption>image-20230517170801140</figcaption></figure><figure><img src="'+U+'" alt="image-20230517170754704" tabindex="0"><figcaption>image-20230517170754704</figcaption></figure><h3 id="添加bram" tabindex="-1"><a class="header-anchor" href="#添加bram" aria-hidden="true">#</a> 添加BRAM</h3><blockquote><p><strong>BRAM，即Block RAM</strong>，是FPGA中一种重要的存储资源。在这里，为了让示例SoC的简单一些，直接使用BRAM存储裸机程序（而没有使用SPI Flash）。在最终的设计中，通常使用SPI Flash装载Bootloader。</p></blockquote><figure><img src="'+z+'" alt="image-20230517171123338" tabindex="0"><figcaption>image-20230517171123338</figcaption></figure><p>双击实例好的BRAM，进入到配置页面。</p><p>在Basic选项卡，我们设置Mode为“BRAM Controller”，Memery Type设置为“Single Port ROM”。</p><blockquote><p>Mode有两个选项，“BRAM Controller”、“Stand Alone”。若选择“BRAM Controller”，我们需要再实例化一个BRAM Controller出来。这是因为BRAM自己提供的接口并非是AXI，需要额外加一个Controller，转化出可用的AXI接口来。至于“Stand Alone”，则会多出一些信号，通过这些信号可以直接操作BRAM，方便自定义BRAM用途。</p><p>这里我们选择“BRAM Controller”，因为我们要通过AXI总线来读取存储在BRAM中的裸机程序。</p></blockquote><figure><img src="'+N+'" alt="image-20230518110557494" tabindex="0"><figcaption>image-20230518110557494</figcaption></figure><p>一旦选择了“BRAM Controller”，则<strong>无法</strong>对BRAM的读写宽度、深度等进行设置。这是因为BRAM Controller核BRAM之间的接口读写均是32位；至于深度，则由分配的地址空间（后面会说）决定。</p><p>注：当分配完地址后，记得Validate设计，深度才会更新。</p><figure><img src="'+H+'" alt="image-20230517173931244" tabindex="0"><figcaption>image-20230517173931244</figcaption></figure><p>在Other Options选项卡中，把Enable Safety Circuit选项框的勾去掉。从左侧原理图可看出，把rsta_busy这个信号给去掉了，我们用不上（也没必要用）。</p><figure><img src="'+L+'" alt="image-20230517174411243" tabindex="0"><figcaption>image-20230517174411243</figcaption></figure><h3 id="添加bram-controller" tabindex="-1"><a class="header-anchor" href="#添加bram-controller" aria-hidden="true">#</a> 添加BRAM Controller</h3><figure><img src="'+E+'" alt="image-20230517203346985" tabindex="0"><figcaption>image-20230517203346985</figcaption></figure><p>协议选择AXI4，数据宽度32位；由于我们上面实例化的BRAM是单端口的，所以Number of BRAM Interface选择1。</p><figure><img src="'+w+'" alt="image-20230517203506422" tabindex="0"><figcaption>image-20230517203506422</figcaption></figure><p>然后将Bram Controller的Port A和Bram相连：</p><figure><img src="'+V+'" alt="截图_20230517203638" tabindex="0"><figcaption>截图_20230517203638</figcaption></figure><h3 id="尝试自动连接的威力" tabindex="-1"><a class="header-anchor" href="#尝试自动连接的威力" aria-hidden="true">#</a> 尝试自动连接的威力</h3><p>在添加完CPU核、时钟、Bram后，可以尝试点一下自动连接。</p><figure><img src="'+W+'" alt="image-20230517203855942" tabindex="0"><figcaption>image-20230517203855942</figcaption></figure><figure><img src="'+Y+'" alt="image-20230517204642037" tabindex="0"><figcaption>image-20230517204642037</figcaption></figure><figure><img src="'+j+'" alt="image-20230517204711873" tabindex="0"><figcaption>image-20230517204711873</figcaption></figure><p>自动连接帮我们干了这么几件事：</p><ol><li>把CPU的AXI接口接到了Interconnect的Slave侧；</li><li>把BRAM Controller的AXI接口接到了Interconnect的Master侧；</li><li>Interconnect上的时钟全连上了；</li><li>生成了一个<code>Processor System Reset</code>IP核，其<code>peripheral_aresetn</code>接到了Interconnect和BRAM Controller上；</li><li><code>Clock Wizard</code>上的时钟信号连到了<code>Processor System Reset</code>、Interconnect、和BRAM Controller上；</li><li>将<code>Clock Wizard</code>上的resetn和clk_in_1标记为<strong>外部信号</strong>（通俗理解为：不是内部IP核提供的信号，而是板上的I/O引脚）。</li></ol><p>自动连接的未必是合理的！一定要自己检查下！下面马上介绍一个自动连接出错的地方...</p><h3 id="processor-system-reset是真不熟" tabindex="-1"><a class="header-anchor" href="#processor-system-reset是真不熟" aria-hidden="true">#</a> Processor System Reset是真不熟</h3><p>其中Processor System Reset是真不熟，第一次见。</p>',97),Re={href:"https://blog.csdn.net/weixin_42837669/article/details/116853566",target:"_blank",rel:"noopener noreferrer"},ye=o('<blockquote><p>通常在Block Design中使用此复位IP，输出作为自定义模块，AXI总线等的<strong>复位信号</strong>。此IP<strong>在初始阶段默认输出复位信号</strong>；在非复位状态下，对于外部复位信号，有效电平需要持续几个时钟周期才被视为有效信号，才会有复位输出。</p><p>人话：产生<strong>复位信号</strong>用的！</p><p>其信号如下：</p></blockquote><table><thead><tr><th>名称</th><th>方向</th><th>位宽</th><th>有效电平</th><th>说明</th></tr></thead><tbody><tr><td>slowest_sync_clk</td><td>I</td><td>1</td><td>-</td><td>最慢同步时钟</td></tr><tr><td>ext_reset_in</td><td>I</td><td>1</td><td>可配置， 默认低电平有效</td><td>外部复位</td></tr><tr><td>aux_reset_in</td><td>I</td><td>1</td><td>可配置， 默认低电平有效</td><td>辅助复位</td></tr><tr><td>mb_debug_sys_rst</td><td>I</td><td>1</td><td>高</td><td>总线调试复位</td></tr><tr><td>dcm_locked</td><td>I</td><td>1</td><td>高</td><td>dcm的locked信号</td></tr><tr><td>mb_reset</td><td>O</td><td>1</td><td>高</td><td>总线复位</td></tr><tr><td>bus_struct_reset</td><td>O</td><td>1 ~ 8， 默认1</td><td>高</td><td>总线高电平复位</td></tr><tr><td>peripheral_reset</td><td>O</td><td>1 ~ 16， 默认1</td><td>高</td><td>外设高电平复位</td></tr><tr><td>interconnect_aresetn</td><td>O</td><td>1 ~ 8， 默认1</td><td>低</td><td>互联低电平复位</td></tr><tr><td>peripheral_aresetn</td><td>O</td><td>1 ~ 16， 默认1</td><td>低</td><td>外设低电平复位</td></tr></tbody></table><p>输出总共有5个，均为各种reset信号，而且有高电平的有低电平的。按道理来说2个复位信号（一个高有效一个低有效）不就够了，搞那么多干啥？</p><p>事实上，在一个系统中，对于不同类别的模块，复位次序不同。例如：对于A、B两个模块，在系统刚刚启动时，都是处于复位状态的。但我们要求A先结束复位，等A彻底准备好了，再结束B的复位，这部就得搞多个复位信号出来了么？</p><blockquote><p>各输出之间有固定的时序关系，此时序关系的目的是让不同功能模块开始工作的时间不同，使用时需要合理使用各输出。</p><p><code>bus_struct_rst</code>与<code>interconnect_areset</code>持续32个周期有效后同时最先失效 -&gt; 过16周期，<code>peripheral_reset</code>与<code>peripheral_areset</code>失效 -&gt; 再过16周期，<code>mb_reset</code>最后失效。</p><figure><img src="'+K+'" alt="img" tabindex="0"><figcaption>img</figcaption></figure></blockquote><p>但看上面自动连线的结果，Interconnect和CPU核、BRAM Controller都用的<code>peripheral_resetn</code>，这是不合理的。应该让Interconnect接<code>interconnect_resetn</code>，其他的（包括CPU核）接<code>peripheral_resetn</code>就好，记得更正下。</p><p>还有一个<code>dcm_locked</code>信号：</p><blockquote><p>特别注意dcm_locked信号，此信号为低时表示<strong>时钟还未稳定</strong>，此时reset IP的复位输出全部有效，只有当dcm_locked信号为高时，reset IP的输出才受外部复位输入与辅助复位输入的控制。</p></blockquote><p>（我们发现Clock Wizard的<code>locked</code>信号和Processor System Reset<code>dcm_locked</code>相连了，印证了上述说法。）</p><h3 id="手动补上剩余的、要补的线" tabindex="-1"><a class="header-anchor" href="#手动补上剩余的、要补的线" aria-hidden="true">#</a> 手动补上剩余的、要补的线</h3><blockquote><p>注：当分配完地址后，记得要Validate验证一下；验证完成后，BRAM深度才会更新。</p></blockquote><figure><img src="'+Q+'" alt="image-20230517213056389" tabindex="0"><figcaption>image-20230517213056389</figcaption></figure><h2 id="设置地址空间" tabindex="-1"><a class="header-anchor" href="#设置地址空间" aria-hidden="true">#</a> 设置地址空间</h2><figure><img src="'+J+'" alt="image-20230517213415846" tabindex="0"><figcaption>image-20230517213415846</figcaption></figure><p>在下方的列表中，“Cell”一列默认特别小，拉大一点，就出来名字了。</p><figure><img src="'+Z+'" alt="截图_20230517213510" tabindex="0"><figcaption>截图_20230517213510</figcaption></figure><p>在设置地址时，我们心里要知道：这是设置的<strong>物理地址</strong>！！！</p><figure><img src="'+$+'" alt="image-20230517213659905" tabindex="0"><figcaption>image-20230517213659905</figcaption></figure>',18),De=e("code",null,"kseg0",-1),qe=e("code",null,"kseg1",-1),Se=e("code",null,"kseg1",-1),Be=e("code",null,"uncached,unmapped",-1),Xe={href:"https://blog.csdn.net/m0_48368588/article/details/123504781",target:"_blank",rel:"noopener noreferrer"},Oe=e("p",null,[t("人话："),e("code",null,"kseg1"),t("由于是"),e("code",null,"uncached"),t("的，所以用于访问外设；用户程序使用"),e("code",null,"kseg0"),t("就好了。")],-1),Ge=o('<p>MIPS的启动地址是<code>0xbfc00000</code>，但那是虚拟地址！对应地物理地址是<code>0x1fc00000</code>！目前反正是测试用的SoC，Range就简单写个16K吧。当Offset Address和Range都确定了以后，High Address自己就算出来了！</p><figure><img src="'+ee+'" alt="image-20230517221751372" tabindex="0"><figcaption>image-20230517221751372</figcaption></figure><h2 id="设计检查" tabindex="-1"><a class="header-anchor" href="#设计检查" aria-hidden="true">#</a> 设计检查</h2><p>至此简易的SoC已经搭建完成了，我们下面来检查一下设计是不是合理。</p><figure><img src="'+te+'" alt="image-20230517214600301" tabindex="0"><figcaption>image-20230517214600301</figcaption></figure><p>验证通过了会提示Successful</p><blockquote><p>在这里把ejtag相关的都接常值0了，nmi接1，中断接1（gs232默认低电平有效）</p></blockquote><figure><img src="'+ie+'" alt="image-20230517222126124" tabindex="0"><figcaption>image-20230517222126124</figcaption></figure><h2 id="封装设计" tabindex="-1"><a class="header-anchor" href="#封装设计" aria-hidden="true">#</a> 封装设计</h2><p>在Sources选项卡中，右键bd文件，点击“Generate Output Products”，用于将IP核参数、连接信息更新到工程中。</p><figure><img src="'+ae+'" alt="image-20230517222308383" tabindex="0"><figcaption>image-20230517222308383</figcaption></figure><figure><img src="'+oe+'" alt="image-20230517222434755" tabindex="0"><figcaption>image-20230517222434755</figcaption></figure><p>还是右键bd文件，选择“Create HDL Wrapper”，创建HDL顶层文件（可以理解为把连线图转成Verilog代码）。</p><p>最后去综合一下，理论上是Success的！</p><figure><img src="'+re+'" alt="image-20230517224910313" tabindex="0"><figcaption>image-20230517224910313</figcaption></figure><h2 id="检验学习成果" tabindex="-1"><a class="header-anchor" href="#检验学习成果" aria-hidden="true">#</a> 检验学习成果</h2><p>上面只添加了一个ROM，接下来请添加一个RAM上去吧！</p><p>地址分配为：（注意！ROM的地址范围改了）</p><figure><img src="'+ne+'" alt="image-20230518193320762" tabindex="0"><figcaption>image-20230518193320762</figcaption></figure><p>修改完成后，记得重复设计检查、封装设计、更新HDL Wrapper等。</p><h2 id="附加-如何把-v文件加入到block-design中" tabindex="-1"><a class="header-anchor" href="#附加-如何把-v文件加入到block-design中" aria-hidden="true">#</a> 附加：如何把.v文件加入到Block Design中</h2><p>这里以添加龙芯官方提供的SoC中的<code>confreg.v</code>为例。</p><p>首先把<code>confreg.v</code>添加进Source中（略），然后右键之：</p><figure><img src="'+se+'" alt="image-20230518224712837" tabindex="0"><figcaption>image-20230518224712837</figcaption></figure><p>可以看到已经加进来啦！</p><figure><img src="'+de+'" alt="image-20230518224753414" tabindex="0"><figcaption>image-20230518224753414</figcaption></figure><h1 id="各式各样的外设" tabindex="-1"><a class="header-anchor" href="#各式各样的外设" aria-hidden="true">#</a> 各式各样的外设</h1>',27),Fe=e("p",null,"本部分大批量参考了如下链接，源地址：",-1),Te={href:"https://blog.cyyself.name/soc-on-xilinx-fpga/",target:"_blank",rel:"noopener noreferrer"},Ue={href:"https://blog.csdn.net/weixin_42612956/article/details/113662808",target:"_blank",rel:"noopener noreferrer"},ze={href:"https://blog.csdn.net/qq_40807206/article/details/109856959",target:"_blank",rel:"noopener noreferrer"},Ne={href:"https://blog.csdn.net/MaoChuangAn/article/details/85268231",target:"_blank",rel:"noopener noreferrer"},He={href:"https://zhuanlan.zhihu.com/p/265704580",target:"_blank",rel:"noopener noreferrer"},Le=e("p",null,"感谢原作者分享！",-1),Ee=o('<h2 id="ddr" tabindex="-1"><a class="header-anchor" href="#ddr" aria-hidden="true">#</a> DDR</h2><blockquote><p>IP 主要提供一个内存接口解决方案，使得我们不需要去进行具体的器件时序实现，通过提供的AXI接口来进行数据的读写控制。</p></blockquote><p>接下来我们使用<code>MIG 7 Series</code>来添加DDR控制器。</p><figure><img src="'+ce+'" alt="mig_7series_0" tabindex="0"><figcaption>mig_7series_0</figcaption></figure><p>在Block Design中添加上述IP后，双击进入配置。（哐哐下一步）</p><h3 id="memory-selection" tabindex="-1"><a class="header-anchor" href="#memory-selection" aria-hidden="true">#</a> Memory Selection</h3><p>选择DDR3即可。</p><figure><img src="'+pe+'" alt="mig_memory_selection" tabindex="0"><figcaption>mig_memory_selection</figcaption></figure><h3 id="options-for-controller-0" tabindex="-1"><a class="header-anchor" href="#options-for-controller-0" aria-hidden="true">#</a> Options For Controller 0</h3><p><code>Clock Period</code>：由FPGA产生作用于DDR的IO口时钟速率，即<strong>连接到DDR的CK，CK#的时钟</strong>，即<strong>内存频率</strong>。</p>',10),we=e("p",null,"内存频率，个人建议选择200MHz的倍数，这样一定可以选用200MHz作为MIG的输入时钟频率。此外，DDR是Double Data Rate，在上升沿和下降沿都可以进行数据传输，因此这里的400MHz对应到我们购买内存条时常说的Double后的有效频率需要*2，也就是800MHz。",-1),Ve={href:"https://blog.cyyself.name/soc-on-xilinx-fpga/",target:"_blank",rel:"noopener noreferrer"},We=o('<p><code>PHY to Controller Clock Ratio</code>：这个决定DDR的IO时钟与用户时钟（ui_clk）的比例，也就是用来作为读MIG控制器地址生成的时钟，也就是AXI控制器的频率，比如采用4:1比例，IO时钟为 400MHz，那么<code>ui_clk</code>为100MHz</p><p><code>Memory Part</code>：选择DDR芯片型号，不同的型号有不同的位宽和容量，<strong>选型号相当于选DDR芯片的位宽和容量</strong>。龙芯开发板上的DDR芯片是<code>K4B1G1646G-BCK0</code>，位宽是16，大小是1Gb，可以选择<code>MT41J64M16XX-125G</code>。</p><p><code>ORDERING</code>：用于设置MIG是否对访存操作进行重新排序（乱序），这里选择<code>Normal</code>以允许重排，提高访存效率。</p><figure><img src="'+ge+'" alt="截图_20230615171642" tabindex="0"><figcaption>截图_20230615171642</figcaption></figure><h3 id="axi-parameter-options" tabindex="-1"><a class="header-anchor" href="#axi-parameter-options" aria-hidden="true">#</a> AXI parameter options</h3><p><code>Data Width</code>：AXI总线的数据宽度，选择32，和CPU暴露出来的AXI总线宽度一致；</p><p><code>Arbitration Scheme</code>：AXI总线读写通道的仲裁方案，保持默认<code>RD_PRI_REG</code>（读取和写入地址通道的优先级相同）就好。</p>',7),Ye=e("p",null,[e("strong",null,"Read Priority (RD_PRI_REG)")],-1),je=e("p",null,"读取和写入地址通道的优先级相同。",-1),Ke=e("p",null,"当发生以下情况之一时，将处理来自写入地址通道的请求：",-1),Qe=e("ul",null,[e("li",null,"没有来自读取地址通道的挂起请求"),e("li",null,"Read starve 限制达到 256。仅在突发结束时检查它"),e("li",null,"Read wait 限制达到16"),e("li",null,"写QOS为非零。仅在突发结束时检查它。")],-1),Je=e("p",null,"读取地址通道的请求以类似的方法处理。",-1),Ze={href:"https://zhuanlan.zhihu.com/p/501725127",target:"_blank",rel:"noopener noreferrer"},$e=o('<p><code>Address Width</code>是自动算出来的：前面说是1Gb大小的DDR么，1Gb/8bit = 2^27，正正好。</p><p>至于下面的<code>Narrow Burst Support</code>、<code>ID Width</code>，链接到AXI总线上后会自动根据总线设置，不用咱们管。</p><figure><img src="'+le+'" alt="截图_20230615171425" tabindex="0"><figcaption>截图_20230615171425</figcaption></figure><h3 id="memory-options" tabindex="-1"><a class="header-anchor" href="#memory-options" aria-hidden="true">#</a> Memory Options</h3><p><code>Input Clock Period</code>：<strong>MIG IP 核的</strong>系统输入时钟周期（输入到MIG IP核里面的时钟），作用于 IP 内部的MMCM，用来生成用户时钟及DDR3时钟。推荐使用 200MHz，这样后续参考时钟可以使用相同时钟源，减少时钟资源消耗。</p><p><code>Controller Chip Select Pin</code>：只在使用单rank配置的内存时，可以通过禁用片选CS#来节约端口，由于龙芯开发板上只有1个DDR芯片，所以这里我们<code>Disable</code>掉。默认情况片选是需要控制的。</p><figure><img src="'+me+'" alt="截图_20230615171331" tabindex="0"><figcaption>截图_20230615171331</figcaption></figure><h3 id="fpga-options" tabindex="-1"><a class="header-anchor" href="#fpga-options" aria-hidden="true">#</a> FPGA Options</h3><p><code>System Clock</code>：选择 MIG IP 的系统时钟类型（即Memory Options中的input clock），如果是FPGA内部产生（例如MMCM和PLL），这些时钟默认是添加了 buffer，所以这里可以选择<code>No Buffer</code>。</p><p><code>Reference Clock</code>：选择参考时钟类型。这个参考时钟是用于输入延时控制（IDELAYCTRL的参考时钟），通常是200MHz。所以当前面input clock选择200MHz时，这里可以选择 <strong>use system clock</strong> 选项。</p><p><code>System Reset Polarity</code>：复位信号高有效还是低有效，看SoC中具体给他什么样的复位信号了。</p><p><code>Internal Vref</code>：建议关闭来提高稳定性，如果关闭后无法通过Validate（例如龙芯杯开发板），再打开。</p><blockquote><p>Internal Vref：</p><p>当数据速率在 800 Mbps及以下时，可以选择内部参考电压来释放Vref管脚作为通用I/O使用（每个bank2个）。以bank35为例：</p><figure><img src="'+ue+'" alt="img" tabindex="0"><figcaption>img</figcaption></figure><p>一般情况，VREF需要接到外部参考电压，例如DDR3L为1.35V。如果端口不够用，可以使用内部参考电压，那么端口 E3和N3 就可以当输入来用。</p></blockquote><figure><img src="'+he+'" alt="截图_20230615172441" tabindex="0"><figcaption>截图_20230615172441</figcaption></figure><h3 id="extended-fpga-options" tabindex="-1"><a class="header-anchor" href="#extended-fpga-options" aria-hidden="true">#</a> Extended FPGA Options</h3><p>默认的<code>50 Ohms</code>就好</p><figure><img src="'+fe+'" alt="截图_20230615172921" tabindex="0"><figcaption>截图_20230615172921</figcaption></figure><h3 id="i-o-planning-options" tabindex="-1"><a class="header-anchor" href="#i-o-planning-options" aria-hidden="true">#</a> I/O Planning Options</h3><p>对于我们购买的FPGA，只能选择Fixed Pin Out。</p><figure><img src="'+_e+'" alt="截图_20230615181133" tabindex="0"><figcaption>截图_20230615181133</figcaption></figure><h3 id="pin-selection" tabindex="-1"><a class="header-anchor" href="#pin-selection" aria-hidden="true">#</a> Pin Selection</h3><p>在这个页面为ddr的各个引脚与板上IO绑定。看着很多？莫怕，先从学长的设计<code>Save Pin Out</code>，导出<code>.ucf</code>文件。然后在自己的工程这边点击<code>Read XDC/UCF</code>，读进来就好（省的自己挨边勾选了233）。读进来后，点击<code>Validate</code>，验证通过后才能下一步。</p><figure><img src="'+be+'" alt="截图_20230615181435" tabindex="0"><figcaption>截图_20230615181435</figcaption></figure><h3 id="各个引脚说明" tabindex="-1"><a class="header-anchor" href="#各个引脚说明" aria-hidden="true">#</a> 各个引脚说明</h3><p>完成上述初始化步骤后，在Block Design中就得到了如下小方框：</p><figure><img src="'+xe+'" alt="截图_20230615214158" tabindex="0"><figcaption>截图_20230615214158</figcaption></figure>',26),et={href:"https://blog.csdn.net/qq_40807206/article/details/109856959",target:"_blank",rel:"noopener noreferrer"},tt={href:"https://www.cnblogs.com/weicc/p/12045782.html",target:"_blank",rel:"noopener noreferrer"},it=o('<table><thead><tr><th>引脚名称</th><th>I/O</th><th>含义</th></tr></thead><tbody><tr><td>sys_rst</td><td>IN</td><td>IP核复位信号，前面设置的是低有效</td></tr><tr><td>sys_clk_i</td><td>IN</td><td>是输入到该IP 核的系统时钟，前面我们选择的是NO BUFFER和use system clock所以这里有一个单端的输入时钟接口；</td></tr><tr><td>aresetn</td><td>IN</td><td>复位信号，低电平有效</td></tr><tr><td>ui_clk_sync_rst</td><td>OUT</td><td>MIG输出的用户端复位信号，高电平复位</td></tr><tr><td>ui_clk</td><td>OUT</td><td>MIG输出的用户端时钟，在4:1模式下是DDR主频的1/4，即100MHz</td></tr><tr><td>mmcm_locked</td><td>?</td><td>?</td></tr><tr><td>init_calib_complete</td><td>OUT</td><td>output信号，高电平表示MIG控制器校准结束，可以对DDR进行操控**（~~使用时必须先等待此信号，否则无法正确操作？~~存疑！）**</td></tr></tbody></table><p>根据学长传承的经验：</p><p><code>aresetn</code>接了一个同步复位器（真的有必要吗）目前个人尝试直接把<code>aresetn</code>和<code>sys_rst</code>接Processor System Reset的<code>peripheral_aresetn</code></p><p>根据cyyself的CDIM_SOC：</p><p><code>ui_clk</code>可以给所有外设提供时钟，并接到AXI Clock Converter的<code>m_axi_aclk</code>上</p><p><code>init_calib_complete</code>似乎又可以不用管。参照ug586：</p><blockquote><p>The PHY asserts init_calib_complete when calibration is finished. The application has <strong>no need to wait</strong> for init_calib_complete before sending commands to the Memory Controller.</p></blockquote><h2 id="axi-interupt-controller" tabindex="-1"><a class="header-anchor" href="#axi-interupt-controller" aria-hidden="true">#</a> AXI Interupt Controller</h2><p>其他的IP都好理解，这个玩意儿一直摸不透，搞不清这玩意儿到底起什么作用，今天盘它！</p><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><blockquote><p>注意！INTC提供的是AXI4-Lite接口，最好用AXI Protocol Converter转换一下</p><figure><img src="'+Ie+`" alt="截图_20230624203545" tabindex="0"><figcaption>截图_20230624203545</figcaption></figure></blockquote><p>首先是这玩意儿能干啥？</p><ul><li><p>多个中断源转为单个中断源</p><p>问题来了，既然是把多个中断源转换为单个中断源，怎么判断到底是哪个设备发出来的中断呢？</p><p>观察AXI IntC在设备树中的节点：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>axi_intc_0: interrupt-controller@1fb00000 {
			#interrupt-cells = &lt;1&gt;;
			compatible = &quot;xlnx,xps-intc-1.00.a&quot;;
			interrupt-controller;
			interrupt-parent = &lt;&amp;cpuintc&gt;;
			interrupts = &lt;2&gt;;
			reg = &lt;0x1fb00000 0x1000&gt;;
			xlnx,kind-of-intr = &lt;0x1&gt;;
			xlnx,num-intr-inputs = &lt;0x1&gt;;
			status = &quot;okay&quot;;
		};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到我们把网卡连在intc上，所以观察网卡的设备树节点：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>axi_ethernetlite: ethernet@1ff00000 {
	compatible = &quot;xlnx,xps-ethernetlite-1.00.a&quot;;
	device_type = &quot;network&quot;;
	//...省略
	interrupt-parent = &lt;&amp;axi_intc_0&gt;; //重点看这一行
	interrupts = &lt;0&gt;;
	status = &quot;okay&quot;;
	//...省略
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>interrupt-parent</code>属性的值恰是<code>AXI Inttrupt Controller</code>节点的label(axi_intc_0)。虽然还不太清楚<code>interrupt-parent</code>这玩意儿到底啥意思，看字面意思是“父中断”，似乎阐明了和AXI INTC的关系！</p><p>也就是说，即便我们将好几个设备的中断都接到<code>AXI Inttrupt Controller</code>上、将多个中断源合并成了一个中断源接到了CPU上，只要设备树写的对，OS就能找到判断到底是哪个设备发出来的中断！</p></li><li><p>转换中断的类型</p><p>例如：有的外设IP，其发出的中断信号类型为边沿触发(Rising Edge)（上升沿触发和下降沿触发），但是一般情况下，咱们的CPU都是采用电平触发(Level)。要想转换，就可以使用AXI intc这个IP</p></li></ul><h3 id="basic选项卡" tabindex="-1"><a class="header-anchor" href="#basic选项卡" aria-hidden="true">#</a> Basic选项卡</h3>`,14),at=e("p",null,"以下内容大部分摘自如下链接，感谢原作者分享！：",-1),ot={href:"https://zhuanlan.zhihu.com/p/265704580",target:"_blank",rel:"noopener noreferrer"},rt=o('<p>双击IP核进入设置页面，首先是Basic选项卡</p><p><code>Number of Peripheral Interrupts(Auto)</code>：外围中断设备数量。此选项允许选择外围中断输入的数量。在IP Integrator中，此值由连接中断信号的数量<strong>自动确定</strong>，不用咱们管。</p><p><code>Enable Fast Interrupt Logic</code>（咱们用不到）：使能快速中断逻辑。此选项使AXI INTC能够在快速中断模式下工作。在这种模式下，AXI INTC使用<code>interrupt_address</code>信号提供中断向量地址，处理器通过<code>processor_ack</code>信号确认中断。当选择单信号中断输出时，不可用快速中断模式。</p><p><code>Peripheral Interrupts Type</code>：外部设备中断类型，该选项用于设置输入的中断信号。</p><ul><li><p><code>Interrupts type - Edge or Level</code>：中断类型-边沿或电平。此选项用于将输入中断设置为边缘或电平类型。**注意到这个设置项是一串32位十六进制数字。其中的每一位都对应一个中断输入源。**0表示电平类型，1表示边沿类型。（可以勾上前面的AUTO自动设置，除非不对，可以关掉AUTO，自己调整一下）</p><p>例如：<code>0xFFFFFFF7</code>代表第4个设备的中断是电平类型的，第1、2、3个设备的中断是边沿类型的。</p></li><li><p><code>Level type - High or Low</code>：电平类型-高电平或低电平。这个设置项还是一串32位十六进制数字，每个数字对应一个中断输入源；如果在上面<code>Interrupts type - Edge or Level</code>的设置中，将某个设备的中断类型设为电平类型，那么要根据设备中断是高电平还是低电平设置这串数字中的位；0表示低电平，1表示高电平。（可以勾上前面的AUTO自动设置，除非不对，可以关掉AUTO，自己调整一下）</p><p>例如，第4个设备的中断是电平类型的，并且是高电平触发，所以要把第4位改成1（其他的都无所谓）。</p></li><li><p><code>Edge type - Rising or Falling</code>：边沿类型-上升沿或下降沿。0表示下降沿，1表示上升沿。</p></li></ul><p><code>Processor Interrupt Type and Connection</code>：<strong>处理器</strong>中断类型和连接，也就是设置合并后的<code>irq</code>中断输出信号是电平还是边沿类型的中断。</p><p><code>Level Type</code>：电平类型，如果在上一个选项（<code>Processor Interrupt Type and Connection</code>）选择了电平类型中断，那么就要选择是高电平中断还是低电平中断。</p><p><code>Interrupt Output Connection</code>（中断输出连接）选项用于设置中断控制器输出的中断信号是单信号还是总线类型的信号，默认<code>Single</code>即可。</p><figure><img src="'+ke+'" alt="截图_20230622215831" tabindex="0"><figcaption>截图_20230622215831</figcaption></figure><h3 id="clock选项卡" tabindex="-1"><a class="header-anchor" href="#clock选项卡" aria-hidden="true">#</a> Clock选项卡</h3><p><code>s_axi_aclk frequency</code>：AXI总线的频率</p><p><code>processor_clk</code>：处理器的频率</p><figure><img src="'+ve+'" alt="截图_20230622221354" tabindex="0"><figcaption>截图_20230622221354</figcaption></figure><h2 id="axi-clock-converter" tabindex="-1"><a class="header-anchor" href="#axi-clock-converter" aria-hidden="true">#</a> AXI Clock Converter</h2><h3 id="时钟域" tabindex="-1"><a class="header-anchor" href="#时钟域" aria-hidden="true">#</a> 时钟域</h3><p>先来补一下时钟域的概念。</p>',16),nt=e("p",null,"以下内容摘自下列链接&GPT回答，感谢原作者分享！",-1),st={href:"https://blog.csdn.net/qq_42043804/article/details/113762379",target:"_blank",rel:"noopener noreferrer"},dt=e("p",null,"FPGA设计中的时钟域指的是在设计中使用时钟信号的逻辑区域。**不同的逻辑区域可能使用不同的时钟信号来驱动其操作和状态转换。**每个时钟域都有自己的时钟频率、时钟边沿和时钟相位等特性。",-1),ct=e("p",null,"例如：某些寄存器是在时钟上升沿更新自己，所以可以说：时钟直接决定了其行为。由于组合逻辑的输入大多是寄存器的输出，所以和寄存器相连的那些组合逻辑，他们的行为也被寄存器的时钟决定。故：寄存器和与之相连的那些组合逻辑就会共享时钟域。",-1),pt=e("p",null,[e("strong",null,"时钟域之间"),t("的数据传输和状态转换通常需要使用专门的技术和器件，例如锁存器、寄存器、FIFO缓冲器以及下面要说的"),e("code",null,"AXI Clock Converter"),t("，来进行同步和调整。这样可以保证在不同时域之间进行可靠的数据传输，并防止因时钟异步导致的数据损坏和错误。")],-1),gt=e("blockquote",null,[e("p",null,"时钟不一致究竟会出现什么问题？试想：若一边时钟快（时钟周期1ms），一边时钟慢（时钟周期2ms），快的给慢的传数据；快的那边1ms传一个字符，但慢的这边2ms才接受一个字符，若没有任何防范措施，是不是数据就丢了？")],-1),lt=e("h3",{id:"配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#配置","aria-hidden":"true"},"#"),t(" 配置")],-1),mt={href:"https://docs.xilinx.com/r/en-US/pg059-axi-interconnect/AXI-Clock-Converter?tocId=E1QpjGNxagasdYBqAwAfsg",target:"_blank",rel:"noopener noreferrer"},ut=o('<p>前面的选项似乎都挺直接的，但最后的<code>Clock Conversion Options</code>有点迷。</p><p><code>Is ACLK Asynchronous</code>：官方文档上只有一句话：<code>Enable asynchronous conversion. </code></p><p><code>Synchronization Stages</code>：<code> Defines the number of synchronizer stages across the cross clock domain logic.</code>（注：“stages”的数量似乎指的是在同步过程中使用的寄存器的数量，不懂）</p><figure><img src="'+Ae+'" alt="截图_20230624153129" tabindex="0"><figcaption>截图_20230624153129</figcaption></figure><h2 id="网口" tabindex="-1"><a class="header-anchor" href="#网口" aria-hidden="true">#</a> 网口</h2><h3 id="配置-1" tabindex="-1"><a class="header-anchor" href="#配置-1" aria-hidden="true">#</a> 配置</h3><figure><img src="'+Pe+'" alt="截图_20230624160909" tabindex="0"><figcaption>截图_20230624160909</figcaption></figure><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h3><p><code>ip2intc_irpt</code>：从名字上可以看出，这个中断信号是要接AXI Interrupt Controller的（ip to INTC的interrupt）。值得注意的是，该中断信号为上边沿触发，记得在INTC中配置对。</p><h2 id="串口" tabindex="-1"><a class="header-anchor" href="#串口" aria-hidden="true">#</a> 串口</h2>',10),ht=e("p",null,"需要注意的是，AXI UART 16550 IP每个寄存器间隔4字节，龙芯杯资料包中的APB AXI+UART每个寄存器间隔1字节，运行Bootloader和操作系统需要注意设备树的修改。当时为了直接运行uCore而不必修改代码，我选择了直接把龙芯杯资料包的APB AXI+UART拿出来用。",-1),ft=e("p",null,"AXI UART 16550还有一些信号用于RTS/CTS，如果开发板硬件没有，可以读User Guide去接0或者1。",-1),_t=e("p",null,"这里需要特别注意的是，如果串口采用UART 16550，则分频需要软件知道UART设备的输入时钟频率，因此设备树中的时钟频率需要正确编写，否则会导致串口波特率偏移从而出现乱码。而UARTLite由于是固定波特率，因此不存在此问题。",-1),bt=e("p",null,"U-Boot还支持Debug串口（包括UART 16550和UARTLite均支持），在.config中填写的时钟频率从其他SoC移植时也不要忘了更改。",-1),xt={href:"https://blog.cyyself.name/soc-on-xilinx-fpga/",target:"_blank",rel:"noopener noreferrer"},It={href:"https://github.com/trivialmips/linux-nontrivial-mips/blob/380d859dedcb9ce7fa90f58d036cc5f88d86b7e2/arch/mips/boot/dts/trivialmips/trivialmips_nscscc.dts",target:"_blank",rel:"noopener noreferrer"},kt=o(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>serial0: serial@1fd02000 {
    device_type = &quot;serial&quot;;
    compatible = &quot;ns16550a&quot;;
    reg = &lt;0x1fd03000 0x1000&gt;;
    reg-offset = &lt;0x0000&gt;;
    reg-io-width = &lt;4&gt;;
    reg-shift = &lt;2&gt;;
    current-speed = &lt;115200&gt;;
    clock-frequency = &lt;100000000&gt;;
    interrupt-parent = &lt;&amp;cpuintc&gt;;
    interrupts = &lt;2&gt;;
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的，也要修改u-boot的defconfig... <em>在这个地方卡了半天</em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CONFIG_DEBUG_UART_SHIFT=2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="编写裸机程序" tabindex="-1"><a class="header-anchor" href="#编写裸机程序" aria-hidden="true">#</a> 编写裸机程序</h1><p>我们需要写两个程序：<code>bootloader</code>和用户程序。为啥要<code>bootloader</code>呢？因为我们的程序<strong>默认是放在ROM中</strong>的，而有一些段却是要被读写的，因而需要<code>bootloader</code>至少把那些<strong>要读写的段load进RAM中</strong>。</p><blockquote><p>下面想到哪儿写哪儿吧，毕竟第一次搞，我也很迷茫。</p></blockquote><h1 id="mips寄存器" tabindex="-1"><a class="header-anchor" href="#mips寄存器" aria-hidden="true">#</a> MIPS寄存器</h1><table><thead><tr><th>编号</th><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>0</td><td>zero</td><td>恒为0的寄存器，一般用来初始化别的寄存器</td></tr><tr><td>1</td><td>at</td><td>被汇编器所保留，用来处理超过32位的long long型的数据</td></tr><tr><td>2-3</td><td>v0-v1</td><td>用来存放函数的返回值</td></tr><tr><td>4-7</td><td>a0-a3</td><td>存放函数的入参</td></tr><tr><td>8-15</td><td>t0-t7</td><td>存放函数中需要保留的临时变量</td></tr><tr><td>16-23</td><td>s0-s7</td><td>存放需要保留的调用栈的信息，当调用子函数的时候，存放需要保留的上下文的信息</td></tr><tr><td>24-25</td><td>t8-t9</td><td>额外供保留临时变量的寄存器</td></tr><tr><td>26-27</td><td>k0-k1</td><td>给操作系统内核使用的</td></tr><tr><td>28</td><td>gp</td><td>存放全局指针</td></tr><tr><td>29</td><td>sp</td><td>存放栈指针</td></tr><tr><td>30</td><td>fp</td><td>存放指向栈帧的指针</td></tr><tr><td>31</td><td>ra</td><td>存放还数返回地址的的寄存器，一般bal和j指令后面的地址将会被保留到ra寄存器内</td></tr></tbody></table><h2 id="编译流程" tabindex="-1"><a class="header-anchor" href="#编译流程" aria-hidden="true">#</a> 编译流程</h2><p>假设我们有一个<code>gpio.c</code>写了一些逻辑，其入口函数为<code>main</code>，<code>start.S</code>为初始化汇编代码，<code>default.ld</code>为链接脚本。为了得到最终的二进制文件，大抵要经过如下流程：</p>`,10),vt=e("h2",{id:"makefile的编写",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#makefile的编写","aria-hidden":"true"},"#"),t(" Makefile的编写")],-1),At=e("h1",{id:"学习nontrivial-mips",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#学习nontrivial-mips","aria-hidden":"true"},"#"),t(" 学习Nontrivial-mips")],-1),Pt={href:"https://github.com/trivialmips/nontrivial-mips",target:"_blank",rel:"noopener noreferrer"},Ct=e("h2",{id:"中断处理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#中断处理","aria-hidden":"true"},"#"),t(" 中断处理")],-1),Mt=e("p",null,[t("很奇怪，两个输入输出设备（串口、PS/2）的中断都是直接接到CPU上的，并没有经过"),e("code",null,"AXI Interrupt Controller"),t("？（包括学长的项目也是这个样子）")],-1),Rt={href:"https://zhuanlan.zhihu.com/p/115834422",target:"_blank",rel:"noopener noreferrer"},yt=o("<p>objcopy：通过指定输入目标为二进制文件(例如 <code>-O binary</code> )， <code>objcopy</code> 可以生成<strong>原始格式的二进制文件</strong>。当 <code>objcopy</code> 生成一个原始格式的二进制文件的时候，它会生成输入的目标文件的<strong>基本内存拷贝</strong>，然后<strong>所有的标号和可重定位信息都会被去掉</strong>。内存拷贝开始于最低段的加载地址，拷贝到输出文件。</p>",1);function Dt(qt,St){const a=r("ExternalLinkIcon"),n=r("Mermaid");return d(),c("div",null,[Me,e("p",null,[t("以下大部分内容摘自（"),e("a",Re,[t("Xilinx IP解析之Processor System Reset v5.0_proc_sys_reset_徐晓康的博客的博客-CSDN博客"),i(a)]),t("），感谢原作者的无私分享！")]),ye,e("blockquote",null,[e("p",null,[t("上面这张图出现了两段特殊的空间，"),De,t("和"),qe,t("。首先来说"),Se,t("，**这段空间是"),Be,t("。**这段空间用来干什么呢？当我们的内核刚开始启动的时候，明显我们的CPU还不具备管理我们的MMU内存管理单元的能力，那么我们需要映射和cache的区域没有办法解决这一问题，所以引出了这一段。"),e("a",Xe,[t("MIPS架构体系kseg0和kseg1段解释_爱学习mips的阿健的博客-CSDN博客"),i(a)])]),Oe]),Ge,e("blockquote",null,[Fe,e("p",null,[e("a",Te,[t("在Xilinx FPGA上搭建SoC – 属于CYY自己的世界 (cyyself.name)"),i(a)])]),e("p",null,[e("a",Ue,[t("Xilinx MIG IP核使用_我是厉害的人的博客-CSDN博客"),i(a)])]),e("p",null,[e("a",ze,[t("【原创】Xilinx_7Series_MIG控制器驱动DDR3_mig工具_锤王马加爵的博客-CSDN博客"),i(a)])]),e("p",null,[e("a",Ne,[t("Xilinx MIG 控制器使用详解（一）_mig xilinx_为中国IC之崛起而读书的博客-CSDN博客"),i(a)])]),e("p",null,[e("a",He,[t("【正点原子FPGA连载】第四章按键中断实验--摘自达芬奇之Microblaze 开发指南 - 知乎 (zhihu.com)"),i(a)])]),Le]),Ee,e("blockquote",null,[we,e("p",null,[t("——"),e("a",Ve,[t("在Xilinx FPGA上搭建SoC – 属于CYY自己的世界 (cyyself.name)"),i(a)])])]),We,e("blockquote",null,[Ye,je,Ke,Qe,Je,e("p",null,[t("——"),e("a",Ze,[t("【VIVADO IP】Memory Interface Generator - 知乎 (zhihu.com)"),i(a)])])]),$e,e("p",null,[t("以下列表参考了"),e("a",et,[t("【原创】Xilinx_7Series_MIG控制器驱动DDR3_mig工具_锤王马加爵的博客-CSDN博客"),i(a)]),t("、"),e("a",tt,[t("基于MIG IP核的DDR3控制器（一） - black_pigeon - 博客园 (cnblogs.com)"),i(a)]),t("感谢原作者！")]),it,e("blockquote",null,[at,e("p",null,[e("a",ot,[t("【正点原子FPGA连载】第四章按键中断实验--摘自达芬奇之Microblaze 开发指南 - 知乎 (zhihu.com)"),i(a)])])]),rt,e("blockquote",null,[nt,e("p",null,[e("a",st,[t("FPGA-时钟域_fpga时钟域_小羊肖恩想的博客-CSDN博客"),i(a)])])]),dt,ct,pt,gt,lt,e("blockquote",null,[e("p",null,[t("官方文档："),e("a",mt,[t("AXI Clock Converter • AXI Interconnect LogiCORE IP Product Guide (PG059) • 阅读器 • AMD 自适应计算文档门户 (xilinx.com)"),i(a)])])]),ut,e("blockquote",null,[ht,ft,_t,bt,e("p",null,[t("——"),e("a",xt,[t("在Xilinx FPGA上搭建SoC – 属于CYY自己的世界 (cyyself.name)"),i(a)])])]),e("p",null,[t("若使用AXI UART 16550，设备树编写可参考"),e("a",It,[t("TrivialMIPS"),i(a)]),t("的实现：")]),kt,i(n,{id:"mermaid-1427",code:"eJxLL0osyFDwCeJSUEgvyMzXS9bVdXZ+vmfai/UTn85coatrBxYNhkkH6+o6Bj/b2A5UgSSdD5QuLkksKsGUhwgjFOQrqEFMAjFSUtMSS3NK9HJSdHV9XF5O3vesbynCWAOopQa6ugr5SVnJ+QWVMBm9pMw8LgDsqkeF"}),vt,At,e("blockquote",null,[e("p",null,[t("THU的佬们都太猛了！项目链接==>"),e("a",Pt,[t("https://github.com/trivialmips/nontrivial-mips"),i(a)])])]),Ct,Mt,e("p",null,[t("（以下内容摘自："),e("a",Rt,[t("Linux命令学习手册-objcopy - 知乎 (zhihu.com)"),i(a)]),t("）")]),yt])}const Xt=s(Ce,[["render",Dt],["__file","SoC_startup.html.vue"]]);export{Xt as default};
